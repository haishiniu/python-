1.Python解释器种类以及特点？
# CPython:C语言开发的，官方推荐，最常用
# IPython:基于CPython之上的交互式解释器，只是在交互上有增强
# JPython:Java写的解释器
# Pypy:Python写的解释器，目前执行速度最快的解释器，采用JIT技术，对Python进行动态编译
# IronPython：C#写的解释器

2.位和字节的关系？
#1字节=8位  
#1byte=8bit （数据存储以字节(Byte)为单位）

3.b、B、KB、MB、GB 的关系？
1B=8bit
1KB=1024B
1MB=1024KB
1G=1024MB
1T=1024G

4.请至少列举5个 PEP8 规范（越多越好）
#1、空格使用
a 各种右括号前不要加空格。
b 逗号、冒号、分号前不要加空格。
c 函数的左括号前不要加空格。如Func(1)。
d 序列的左括号前不要加空格。如list[2]。
e 操作符左右各加一个空格，不要为了对齐增加空格。
f 函数默认参数使用的赋值符左右省略空格。
g 不要将多句语句写在同一行，尽管使用‘；’允许。
8 if/for/while语句中，即使执行语句只有一句，也必须另起一行。
#2、代码编排
   a 缩进，4个空格，而不是tab键
   b 每行长度79，换行可使用反斜杠，最好使用圆括号。
   c 类与类之间空两行
   d 方法之间空一行
   
5.ascii、unicode、utf-8、gbk 区别？
#Ascii： 1个字节 支持英文
#unicode ：所有字符（无论中文、英文等）1个字符：4个字节
#gbk ： 1个字符，英文1个字节，中文2个字节。
#utf-8 ：英文1个字节，欧洲字符：2个字节， 亚洲： 3个字节。

6.字节码和机器码的区别？
- C代码被编译成机器码（二进制），在机器上直接执行。
- Cpython编译你的python源代码，生成字节码。
- 机器码快的多，字节码更易迁移，也安全。

7.三元运算规则以及应用场景？
# 三元运算符就是在赋值变量的时候，可以直接加判断，然后赋值
a = 1
b = 2
c = a if a > 1 else b  # 如果a大于1的话，c=a，否则c=b

8.列举 Python2和Python3的区别？
'Print'：
    py2--print; 
    py3--print()函数
'编码'：
    py2默认是ascii码；
    py3默认是utf-8
'字符串'：
    py2中分ascii(8位)、unicode(16位)；
    py3中所有字符串都是unicode字符串
'True和False'：
    py2中是两个全局变量(1和0)可以重新赋值；
    py3中为两个关键字，不可重新赋值
'迭代'：
    py2:xrange；
    py3:range
'Nonlocal'：
    py3专有的（声明为非局部变量）
'经典类&新式类'：
    py2：经典类和新式类并存；
    py3：新式类都默认继承object
'yield'：
    py2：yield
    py3：yield/yield from
'文件操作'：
    py2：readliens（）读取文件的所有行，返回一个列表，包含所有行的结束符
         xreadliens（）返回一个生成器，循环取值　　
    py3: 只有readlines()
	
9.xrange和range的区别？
#range产生的是一个列表，xrange产生的是生成器。
#数据较大时xrange比range好。
#Range一下把数据都返回，xrange通过yield每次返回一个。

10.文件操作时：xreadlines和readlines的区别？
# Readlines：读取文件的所有行，返回一个列表，包含所有行的结束符
# Xreadlines：返回一个生成器，循环使用和readlines基本一致 。（py2有，py3没有）

11.lambda表达式格式以及应用场景？
# 格式：
    匿名函数：res = lambda x：i*x   print(res(2))
# 应用场景：
    Filter(),map(),reduce(),sorted()函数中经常用到，它们都需要函数形参数；
    一般定义调用一次。
    （reduce()对参数序列中元素进行累积）
	
12.pass的作用？
# Pass一般用于站位语句，保持代码的完整性，不会做任何操作。

13.*arg和**kwarg作用
# 他们是一种动态传参，一般不确定需要传入几个参数时，可以使用其定义参数，然后从中取参

'*args'：按照位置传参，将传入参数打包成一个‘元组’(打印参数为元组-- tuple)
'**kwargs'：按照关键字传参，将传入参数打包成一个‘字典’(打印参数为字典-- dict)

14.is和==的区别
==：判断某些值是否一样，比较的是值
is：比较的是内存地址（引用的内存地址不一样，唯一标识：id）

15.简述Python的深浅拷贝以及应用场景？
#浅拷贝：
不管多么复杂的数据结构，只copy对象最外层本身，该对象引用的其他对象不copy，
内存里两个变量的地址是一样的，一个改变另一个也改变。
#深拷贝：
完全复制原变量的所有数据，内存中生成一套完全一样的内容；只是值一样，内存地址不一样，一方修改另一方不受影响

16.Python垃圾回收机制？
# Python垃圾回收机制
Python垃圾回收机制,主要使用'引用计数'来跟踪和回收垃圾。
在'引用计数'的基础上，通过'标记-清除'（mark and sweep）解决容器对象可能产生的循环引用问题.
通过'分代回收'以空间换时间的方法提高垃圾回收效率。

'引用计数'
PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。
当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，
它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。
    \优点:1.简单 2.实时性
    \缺点:1.维护引用计数消耗资源 2.循环引用

'标记-清楚机制'
基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，
遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，
然后清扫一遍内存空间，把所有没标记的对象释放。

'分代技术'
分代回收的整体思想是：
将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，
垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。

17.Python的可变类型和不可变类型？
# 可变类型：列表、字典、集合
# 不可变类型：数字、字符串、元祖
（可变与否指内存中那块内容value）

18.列举常见的内置函数？
# map:遍历序列，为每一个序列进行操作，返回一个结果列表
l = [1, 2, 3, 4, 5, 6, 7]
def pow2(x):
   return x * x
res = map(pow2, l)
print(list(res)) #[1, 4, 9, 16, 25, 36, 49]
--------------------------------------------------------------
# reduce：对于序列里面的所有内容进行累计操作
from functools import reduce
def add(x, y):
   return x+y
print(reduce(add, [1,2,3,4])) #10
--------------------------------------------------------------
# filter：对序列里面的元素进行筛选，最终获取符合条件的序列。
l = [1, 2, 3, 4, 5]
def is_odd(x):  # 求奇数
   return x % 2 == 1
print(list(filter(is_odd, l))) #[1, 3, 5]
--------------------------------------------------------------
#zip用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表
a = [1,2,3]
b=[4,5,6]
c=[4,5,6,7,8]
ziped1 = zip(a,b)
print('ziped1>>>',list(ziped1)) #[(1, 4), (2, 5), (3, 6)]
ziped2 = zip(a,c)
print('ziped2>>>',list(ziped2)) #[(1, 4), (2, 5), (3, 6)],以短的为基准

19.filter、map、reduce的作用？
# map:遍历序列，为每一个序列进行操作，获取一个新的序列
# reduce：对于序列里面的所有内容进行累计操作
# filter：对序列里面的元素进行筛选，最终获取符合条件的序列。

20.比较： a = [1,2,3] 和 b = [(1),(2),(3) ] 以及 b = [(1,),(2,),(3,) ] 的区别？
前两个列表内是int
最后一个列表内是元组

21.logging模块的作用？以及应用场景？
# 作用：
    管理我们程序的执行日志，省去用print记录操作日志的操作，并且可以将标准输入输出保存到日志文件
# 场景：
    爬虫爬取数据时，对爬取进行日志记录，方便分析、排错。
	
22.请用代码简单实现stack
class Stack(object):
   # 初始化栈
   def __init__(self):
      self.items = []
   # 判断栈是否为空
   def is_empty(self):
      return self.items == []
   # 返回栈顶
   def peek(self):
      return self.items[len(self.items) - 1]
   # 返回栈大小
   def size(self):
      return len(self.items)
   # 压栈
   def push(self, item):
      self.items.append(item)
   # 出栈
   def pop(self):
      return self.items.pop()
	  
23.常用字符串格式化哪几种？
# %占位符
s = 'I am %s' %'zhugaochao'
print(s)    #I am zhugaochao
# format格式化输出
i = "i am {}".format('zhugaochao')
print(i)    #i am zhugaochao

24.简述 生成器、迭代器、可迭代对象 以及应用场景？
# 装饰器：
能够在不修改原函数代码的基础上，在执行前后进行定制操作，闭包函数的一种应用
场景：
   - flask路由系统
   - flask before_request
   - csrf
   - django内置认证
   - django缓存
# 手写装饰器；
import functools
def wrapper(func):
   @functools.wraps(func)  #不改变原函数属性
   def inner(*args, **kwargs):
      执行函数前
      return func(*args, **kwargs)
      执行函数后
   return inner
1. 执行wapper函数，并将被装饰的函数当做参数。 wapper(index)
2. 将第一步的返回值，重新赋值给  新index =  wapper(老index)
@wrapper    #index=wrapper(index)
def index(x):
   return x+100
# ---------------------------------------------------------------
# 生成器：
一个函数内部存在yield关键字
应用场景：
   - rang/xrange
   - redis获取值
      - conn = Redis(......)
        - v=conn.hscan_iter() # 内部通过yield 来返回值
    - stark组件中
        - 前端调用后端的yield
# ---------------------------------------------------------------
# 迭代器：
内部有__next__和__iter__方法的对象，帮助我们向后一个一个取值，迭代器不一定是生成器
应用场景：
   - wtforms里面对form对象进行循环时，显示form中包含的所有字段
   - 列表、字典、元组
   （可以让一个对象被for循环）
   
25.谈谈你对闭包的理解？
# 闭包函数就是内部的函数调用外部函数的变量，常用于装饰器。
# 判断闭包函数的方法：__closure__，输出的__closure__有cell元素说明是闭包函数
# 闭包的意义与应用：延迟计算：

26.谈谈你对面向对象的理解？
#封装：
   其实就是将很多数据封装到一个对象中，类似于把很多东西放到一个箱子中，
   如：一个函数如果好多参数，起始就可以把参数封装到一个对象再传递。
#继承：
   如果多个类中都有共同的方法，那么为了避免反复编写，就可以将方法提取到基类中实现，
   让所有派生类去继承即可。
#多态：
   指基类的同一个方法在不同派生类中有着不同功能。python天生支持多态。
   
27.Python面向对象中的继承有什么特点？
#Python3的继承机制

# 子类在调用某个方法或变量的时候，首先在自己内部查找，如果没有找到，则开始根据继承机制在父类里查找。
# 根据父类定义中的顺序，以深度优先的方式逐一查找父类！
继承参数的书写有先后顺序，写在前面的被优先继承。

28.面向对象深度优先和广度优先是什么？
# Python的类可以继承多个类，Python的类如果继承了多个类，那么其寻找方法的方式有两种

当类是经典类时，多继承情况下，会按照深度优先方式查找
当类是新式类时，多继承情况下，会按照广度优先方式查找
简单点说就是：经典类是纵向查找，新式类是横向查找

经典类和新式类的区别就是，在声明类的时候，新式类需要加上object关键字。在python3中默认全是新式类

29.面向对象中super的作用？
主要在子类继承父类的所有属性和方法时来使用

30.是否使用过functools中的函数？其作用是什么？
在装饰器中，会用到；functools.wraps()主要在装饰器中用来装饰函数

Stark上下文管理源码中，走到视图阶段时有用到functools中的偏函数，request = LocalProxy(partial(_lookup_req_object, 'request'))

31.列举面向对象中带爽下划线的特殊方法，如：__new__、__init__
# __getattr__
　CBV
　django配置文件
　wtforms中的Form()示例化中 将"_fields中的数据封装到From类中"
# __mro__ 
　wtform中 FormMeta中继承类的优先级
# __dict__   
是用来存储对象属性的一个字典，其键为属性名，值为属性的值
# __new__ 
实例化但是没有给当前对象
wtforms，字段实例化时返回：不是StringField，而是UnboundField
est frawork many=Turn  中的序列化
# __call__
flask 请求的入口app.run()
字段生成标签时：字段.__str__ => 字段.__call__ => 插件.__call__
# __iter__ 
循环对象是，自定义__iter__
wtforms中BaseForm中循环所有字段时定义了__iter__
# -metaclass
作用：用于指定当前类使用哪个类来创建
场景：在类创建之前定制操作
示例：wtforms中，对字段进行排序。

31.静态方法和类方法区别？
Classmethod必须有一个指向类对象的引用作为第一个参数；
@classmethod
def class_func(cls):
   """ 定义类方法，至少有一个cls参数 """
   print('类方法')
---------------------------------------------------------
Staticmethod可以没有任何参数。
@staticmethod
def static_func():
   """ 定义静态方法 ，无默认参数"""
   print('静态方法')
   
32.列举面向对象中的特殊成员以及应用场景
1. __doc__：表示类的描述信息。
2.__module__：表示当前操作的对象在那个模块；
3.__class__：表示当前操作的对象的类是什么。
4.__init__：构造方法，通过类创建对象时，自动触发执行。
5.__call__：对象后面加括号，触发执行。
6.__dict__：类或对象中的所有成员。
7.__str__：如果一个类中定义了__str__方法，那么在打印对象时，默认输出该方法的返回值。
class Foo:
    def __str__(self):
        return 'aaa'
obj = Foo()
print(obj)
# 输出：aaa

8.__getitem__、__setitem__、__delitem__：用于索引操作，如字典。以上分别表示获取、设置、删除数据。
9.__iter__：用于迭代器，之所以列表、字典、元组可以进行for循环，是因为类型内部定义了 __iter__。

33.装饰器的写法以及应用场景。
import functools
def wrapper(func):
    @functools.wraps(func)
    def inner(*args, **kwargs):
        print('我是装饰器')
        return func
return inner

@wrapper
def index():
    print('我是被装饰函数')
    return None
index()

# 应用场景
    - 高阶函数
    - 闭包
    - 装饰器 
    - functools.wraps(func)
	
34.json序列化时，可以处理的数据类型有哪些？如何定制支持datetime类型？
# 可序列化数据类型：
字典、列表、数字、字符串、元组；如果是元组，自动转成列表（再转回去的话也是列表）
# 自定义时间序列化转换器
import json
from json import JSONEncoder
from datetime import datetime
class ComplexEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.strftime('%Y-%m-%d %H:%M:%S')
        else:
            return super(ComplexEncoder,self).default(obj)
d = { 'name':'alex','data':datetime.now()}
print(json.dumps(d,cls=ComplexEncoder))
# {"name": "alex", "data": "2018-05-18 19:52:05"}

35.简述 yield和yield from关键字。
1、yield使用 
1）函数中使用yield，可以使函数变成生成器。一个函数如果是生成一个数组，就必须把数据存储在内存中，如果使用生成器，则在调用的时候才生成数据，可以节省内存。
2）生成器方法调用时，不会立即执行。需要调用next()或者使用for循环来执行。

2、yield from的使用
1）为了让生成器（带yield函数），能简易的在其他函数中直接调用，就产生了yield from。 

36.简述 OSI 七层协议。
物理层：主要基于电器特性发送高低电压(1、0)，设备有集线器、中继器、双绞线等，单位：bit
数据链路层：定义了电信号的分组方式，设备：交换机、网卡、网桥，单位：帧
网络层：主要功能是将网络地址翻译成对应屋里地址，设备：路由
传输层：建立端口之间的通信，tcp、udp协议
会话层：建立客户端与服务端连接
表示层：对来自应用层的命令和数据进行解释，按照一定格式传给会话层。如编码、数据格式转换、加密解密、压缩解压
应用层：规定应用程序的数据格式

37.什么是C/S和B/S架构？
#C/S架构：
   client端与server端的服务架构
#B/S架构：
   隶属于C/S架构，Broswer端（网页端）与server端；
   优点：统一了所有应用的入口，方便、轻量级
   
38.简述 三次握手、四次挥手的流程。
#三次握手：
   1.客户端(Client)向服务端(Server)发送一次请求
   2.服务端确认并回复客户端
   3.客户端检验确认请求，建立连接
#四次挥手：
   1.客户端向服务端发一次请求
   2.服务端回复客户端(断开客户端-->服务端)
   3.服务端再次向客户端发请求(告诉客户端可以断开了)
   4.客户端确认请求，连接断开
   
39.什么是arp协议？
#ARP(地址解析协议) 其主要用作将IP地址翻译为以太网的MAC地址

#在局域网中，网络中实际传输的是“帧”，帧里面是有目标主机的MAC地址的。

#在以太网中，一个主机要和另一个主机进行直接通信，必须要知道目标主机的MAC地址。


#所谓“地址解析”就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。
#ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。

40.TCP和UDP的区别？
TCP协议：面向连接
   - 通信之前先三次握手
   - 断开之前先四次握手
   - 必须先启动服务端，再启动客户端-->连接服务端
   - 安全、可靠、面向连接(不会丢包)
#UDP协议：无连接
   - 传输速度快
   - 先启动哪一端都可以
   - 不面向连接，不能保证数据的完整性(如：QQ聊天)
   
41.为何基于tcp协议的通信比基于udp协议的通信更可靠？
因为TCP是面向连接的

通信之前先三次握手，通过握手，确保连接成功之后再通信
断开之前先四次挥手；双方互相确认之后再断开连接，这样一来保证了数据的安全、可靠，避免丢包

42.什么是socket？简述基于tcp协议的套接字通信流程。
#服务端：                    
   创建套接字               
   绑定IP和端口             
   监听                  
   accept等待连接          
   通信(收recv、发send)
#客户端：
   创建套接字
   绑定IP和端口
   链接服务器
   通信(收revc、发send)
   
43.什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？
粘包：数据粘在一起，主要因为：接收方不知道消息之间的界限，不知道一次性提取多少字节的数据造成的
数据量比较小，时间间隔比较短，就合并成了一个包，这是底层的一个优化算法（Nagle算法）

44.IO多路复用的作用？
# IO多路复用分为时间上的复用和空间上的复用，
# 空间上的复用是指将内存分为几部分，每一部分放一个程序，这样同一时间内存中就有多道程序；
# 时间上的复用是指多个程序需要在一个cpu上运行，不同的程序轮流使用cpu，
# 当某个程序运行的时间过长或者遇到I/O阻塞，操作系统会把cpu分配给下一个程序，
# 保证cpu处于高使用率，实现伪并发。

45.select、poll、epoll 模型的区别？
# select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理。这样所带来的缺点是：
    # 1.单个进程可监视的fd数量被限制
    # 2.需要维护一个用来存放大量fd的数据结构
    #   这样会使得用户空间和内核空间在传递该结构时复制开销大
    # 3.对socket进行扫描时是线性扫描

# poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，
# 它没有最大连接数的限制，原因是它是基于链表来存储的但是同样有一个缺点：
# 大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。
# epoll支持水平触发和边缘触发，最大的特点在于边缘触发，
# 它只告诉进程哪些fd刚刚变为就需态，并且只会通知一次。

46.简述 进程、线程、协程的区别 以及应用场景？
# 进程
进程拥有自己独立的堆和栈，既不共享堆，亦不共享栈，进程由操作系统调度。
# 线程
线程拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程亦由操作系统调度
# 协程和线程的区别
协程避免了无意义的调度，由此可以提高性能；但同时协程也失去了线程使用多CPU的能力。

47.GIL锁是什么？
# GIL
线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.
对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，
python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。

解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).

48.Python中如何使用线程池和进程池？
进程池：就是在一个进程内控制一定个数的线程
基于concurent.future模块的进程池和线程池 （他们的同步执行和异步执行是一样的）

49.threading.local的作用？
a.threading.local
作用：为每个线程开辟一块空间进行数据存储。
问题：自己通过字典创建一个类似于threading.local的东西。
storage = {
   4740: {val: 0},
   4732: {val: 1},
   4731: {val: 3},
}

b.自定义Local对象
作用：为每个线程(协程)
开辟一块空间进行数据存储。
try:
   from greenlet import getcurrent as get_ident
except Exception as e:
   from threading import get_ident
from threading import Thread
import time
class Local(object):
   def __init__(self):
      object.__setattr__(self, 'storage', {})
   def __setattr__(self, k, v):
      ident = get_ident()
      if ident in self.storage:
         self.storage[ident][k] = v
      else:
         self.storage[ident] = {k: v}
   def __getattr__(self, k):
      ident = get_ident()
      return self.storage[ident][k]
obj = Local()
def task(arg):
   obj.val = arg
   obj.xxx = arg
   print(obj.val)
for i in range(10):
   t = Thread(target=task, args=(i,))
   t.start()
   
50.什么是并发和并行？
# 并发：同一时刻只能处理一个任务，但一个时段内可以对多个任务进行交替处理(一个处理器同时处理多个任务)
# 并行：同一时刻可以处理多个任务(多个处理器或者是多核的处理器同时处理多个不同的任务)
# 类比：并发是一个人同时吃三个馒头，而并行是三个人同时吃三个馒头。

51.进程之间如何进行通信？
# 进程间通讯有多种方式，包括信号，管道，消息队列，信号量，共享内存，socket等

52.进程锁和线程锁的作用？
线程锁: 大家都不陌生，主要用来给方法、代码块加锁。当某个方法或者代码块使用锁时，那么在同一时刻至多仅有有一个线程在执行该段代码。当有多个线程访问同一对象的加锁方法 / 代码块时，同一时间只有一个线程在执行，其余线程必须要等待当前线程执行完之后才能执行该代码段。但是，其余线程是可以访问该对象中的非加锁代码块的。

进程锁: 也是为了控制同一操作系统中多个进程访问一个共享资源，只是因为程序的独立性，各个进程是无法控制其他进程对资源的访问的，但是可以使用本地系统的信号量控制（操作系统基本知识）。

分布式锁: 当多个进程不在同一个系统之中时，使用分布式锁控制多个进程对资源的访问。

53.解释什么是异步非阻塞？
'非阻塞'：
    遇到IO阻塞不等待(setblooking=False),（可能会报错->捕捉异常）
        - sk=socket.socket()
        - sk.setblooking(False)
'异步'：
    回调(ajax)，当达到某个指定状态之后，自动调用特定函数
	
54.如何修改本地hosts文件？
'hosts':
Hosts就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”
可以用来屏蔽一些网站，或者指定一些网站(修改hosts翻墙)
'修改'：
    # windows:
        位置：C:\Windows\System32\drivers\etc
        也可以通过第三方软件，我用的火绒，可以直接进行编辑hosts
    # linux:
        位置：/etc/hosts
        修改：vi /etc/hosts

55.Nginx是什么及作用？
Nginx是一个轻量级、高性能、稳定性高、并发性好的HTTP和反向代理服务器。

56.keepalived是什么及作用?
Keepalived是Linux下一个轻量级别的高可用解决方案。
高可用，其实两种不同的含义：广义来讲，是指整个系统的高可用行，狭义的来讲就是之主机的冗余和接管，

57.haproxy是什么以及作用？
HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代 理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。
HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，
完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架中， 
同时可以保护你的web服务器不被暴露到网络上。

58.什么是负载均衡？
负载均衡有两方面的含义：
# 首先，大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间；

# 其次，单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，
将结果汇总，返回给用户，系统处理能力得到大幅度提高。

59.什么是rpc及应用场景？
RPC 的全称是 Remote Procedure Call 是一种进程间通信方式。
它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。

即程序员无论是调用本地的还是远程的，本质上编写的调用代码基本相同

60.简述 asynio模块的作用和应用场景。
asyncio是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。
asyncio的异步操作，需要在coroutine中通过yield from完成。

61.简述 gevent模块的作用和应用场景。
Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，
在gevent中用到的主要模式是Greenlet, 它是以C扩展模块形式接入Python的轻量级协程。 
Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。  

62.twisted框架的使用和应用？
Twisted是一个事件驱动型的网络模型。
时间驱动模型编程是一种范式，这里程序的执行流由外部决定。
特点是：包含一个事件循环，当外部事件发生时，使用回调机制来触发相应的处理。

63.MySQL常见数据库引擎及比较？
'Myisam':
# 支持全文索引
# 查询速度相对较快
# 支持表锁
#     表锁：select * from tb for update;（锁：for update）
'InnoDB':
# 支持事务
# 支持行锁、表锁
#     表锁：select * from tb for update;（锁：for update）
#     行锁: select id ,name from tb where id=2 for update;（锁：for update）

64.简述数据三大范式？

# 数据库的三大特性：
'实体':表
'属性'：表中的数据(字段)
'关系'：表与表之间的关系
----------------------------------------------------
# 数据库设计三大范式：
'第一范式(1NF)'
    数据表中的每一列(每个字段)，必须是不可拆分的最小单元
    也就是确保每一列的原子性。
'第二范式(2NF)'
    满足第一范式后(1NF)，要求表中的所有列，都必须依赖于主键，
    而不能有任何一列 与主键没有关系，也就是说一个表只描述一件事。
'第三范式(3NF)'
    必须先满足第二范式(2NF)
    要求：表中每一列只与主键直接相关而不是间接相关(表中每一列只能依赖于主键)
	
65.什么是事务？MySQL如何支持事务？
'什么是事务'
    事务由一个或多个sql语句组成一个整体；
    在事务中的操作，要么都执行修改，要么都不执行，
    只有在该事务中所有的语句都执行成功才会将修改加入到数据库中，否则回滚到上一步。
'Mysql实现事务'
    InnoDB支持事务，MyISAM不支持
    # 启动事务：
        # start transaction；
        # update from account set money=money-100 where name='a';
        # update from account set money=money+100 where name='b';
        # commit；
        'start transaction 手动开启事务，commit 手动关闭事务'
		
66.数据库五大约束
'数据库五大约束'
    1.primary KEY:设置主键约束；
    2.UNIQUE：设置唯一性约束，不能有重复值；
    3.DEFAULT 默认值约束    
    4.NOT NULL：设置非空约束，该字段不能为空；
    5.FOREIGN key :设置外键约束。
	
67.简述数据库设计中一对多和多对多的应用场景？
# 一对一关系示例：
　　一个学生对应一个学生档案材料，或者每个人都有唯一的身份证编号。
# 一对多关系示例：(下拉单选)
　　一个学生只属于一个班，但是一个班级有多名学生。
# 多对多关系示例：(下拉多选)
　　一个学生可以选择多门课，一门课也有多名学生。

68.简述触发器、函数、视图、存储过程？
'触发器'：
    对数据库某个表进行【增、删、改】前后，自定义的一些SQL操作
'函数'：
    在SQL语句中使用的函数 #例如：select sleep(2)
    聚合函数：max、sam、min、avg
    时间格式化：date_format
    字符串拼接：concat
    自定制函数：(触发函数通过 select)
'视图'：
    对某些表进行SQL查询，将结果实时显示出来(是虚拟表)，只能查询不能更新
'存储过程'：
    将提前定义好的SQL语句保存到数据库中并命名；以后在代码中调用时直接通过名称即可
	
69.MySQL索引种类
'主键索引(单列)'：
    primary key
    加速查找+约束：不能重复、不能为空
'普通索引(单列)':
    加速查找
'唯一索引(单列)'：
    unique
    加速查找+约束：不能重复
'联合索引(多列)'：
    查询时根据多列进行查询(最左前缀)
'联合唯一索引(多列)'：
    遵循最左前缀规则(命中索引)
# 其他词语
    1、索引合并：利用多个单列索引查询
    2、覆盖索引：在索引表中就能将想要的数据查询到
	
70.索引在什么情况下遵循最左前缀的规则？
你可以认为联合索引是闯关游戏的设计
例如你这个联合索引是state/city/zipCode
那么state就是第一关 city是第二关， zipCode就是第三关
你必须匹配了第一关，才能匹配第二关，匹配了第一关和第二关，才能匹配第三关
你不能直接到第二关的
索引的格式就是第一层是state，第二层才是city

71.主键和外键的区别？
'主键'
    唯一标识一条记录
    用来保证数据的完整性
    主键只能有一个
'外键'
    表的外键是另一个表的主键，外键可以有重复的，可以是空值
    用来和其他表建立联系用的
    一个表可以有多个外键
'索引'
    该字段没有重复值，但可以有一个空值
    提高查询速度
    一个表可以有多个唯一索引
	
72.MySQL常见的函数？
'当前时间'
    select now();
'时间格式化'
    select DATE_FORMAT(NOW(), '%Y(年)-%m(月)-%d(日) %H(时):%i(分):%s(秒)')
'日期加减'
    select DATE_ADD(DATE, INTERVAL expr unit)
    select DATE_ADD(NOW(), INTERVAL 1 DAY) #当前日期加一天
    \expr：正数(加)、负数(减)
    \unit：支持毫秒microsecond、秒second、小时hour、天day、周week、年year
'类型转换'
    cast( expr AS TYPE) 
    select CAST(123 AS CHAR)
'字符串拼接'
    concat(str1,str2，……)
    select concat('hello','2','world') --> hellow2world
'聚合函数'
    avg() #平均值
    count() #返回指定列/行的个数
    min() #最小值
    max() #最大值
    sum() #求和
    group_concat() #返回属于一组的列值，连接组合而成的结果
'数学函数'
    abs() #绝对值
    bin() #二进制
    rand() #随机数
	
73.列举 创建索引但是无法命中索引的8种情况。
#使用'like ‘%xx’'
    select * from tb1 where name like '%cn';
#使用'函数'
    select * from tb1 where reverse(name)='zgc';
#使用'or'
    select * from tb1 where nid=1 or  email='zgc@gmial.com';
    特别的：当or条件中有未建立索引的列才失效，一下会走索引
            # select * from tb1 where nid=1 or name='zgc';
            # select * from tb1 where nid=1 or email='zgc@gmial.com' and name='zgc';
#'类型不一致'
    如果列是字符串类型，传入条件是必须用引号引起来，不然则可能会无法命中
    select * from tb1 where name=666；
#含有'!= '
    select * from tb1 where name != 'zgc';
    特别的：如果是主键，还是会走索引
            # select * from tb1 where nid != 123;
#含有'>'
    select * from tb1 where name > 'zgc';
    特别的：如果是主键或者索引是整数类型，则还是会走索引
            # select * from tb1 where nid > 123;
            # select * from tb1 where name > 123;
#含有'order by'
    select email from tb1 order by name desc;
    当根据索引排序时，选择的映射如果不是索引，则不走索引
    特别的：如果对主键排序，则还是走索引：
            # select * from tb1 order by nid desc;

#组合索引最左前缀
    如果组合索引为：（name，email）
    name and email #使用索引
    name           #使用索引
    email          #不使用索引
	
74.如何开启慢日志查询？
'可以通过修改配置文件开启'
slow_query_log=ON   #是否开启慢日志记录
long_query_time=2   #时间限制，超过此时间，则记录
slow_query_log_file=/usr/slow.log  #日志文件
long_queries_not_using_indexes=ON  #是否记录使用索引的搜索

75.数据库导入导出命令（结构+数据）？
#导出：
    mysqldump --no-defaults -uroot -p 数据库名字 > 导出路径
    '--no-defaults':解决“unknown option --no-beep”报错
#导入：
    1、mysqldump -uroot -p 数据库名称 < 路径
    2、进入数据库； source + 要导入数据库文件路径
	
76.数据库优化方案？
1、创建数据表时把固定长度的放在前面
2、将固定数据放入内存：choice字段(django中用到，1,2,3对应相应内容)
3、char不可变，varchar可变
4、联合索引遵循最左前缀(从最左侧开始检索)
5、避免使用 select *
6、读写分离：
    #利用数据库的主从分离：主，用于删除、修改、更新；从，用于查
    #实现：两台服务器同步数据
    \原生SQL:select * from db.tb
    \ORM：model.User.object.all().using('default')
    \路由：db router
7、分库
    # 当数据库中的表太多，将某些表分到不同数据库，例如：1W张表时
    # 代价：连表查询跨数据库，代码变多
8、分表
    # 水平分表：将某些列拆分到另一张表，例如：博客+博客详情
    # 垂直分表：将某些历史信息，分到另外一张表中，例如：支付宝账单
9、加缓存
    # 利用redis、memcache(常用数据放到缓存里，提高取数据速度)
    # 缓存不够可能会造成雪崩现象
10、如果只想获取一条数据
    select * from tb where name = 'zgc' limit 1;
	
77.1000w条数据，使用limit offset 分页时，为什么越往后翻越慢？如何解决？
# 例如:
#limit 100000,20; 从第十万条开始往后取二十条,
#limit 20 offset 100000; limit后面是取20条数据,offset后面是从第10W条数据开始读
因为当一个数据库表过于庞大，LIMIT offset, length中的offset值过大，则SQL查询语句会非常缓慢
--------------------------------------------------------------------------
'优化一'
先查看主键，再分页：
select * from tb where id in (select id from tb where limit 10 offset 30)
--------------------------------------------------------------------------
'优化二'
记录当前页，数据、ID、最大值和最小值(用于where查询)
在翻页时，根据条件进行筛选，筛选完毕后，再根据 limit offset 查询
select * from(select * from tb where id > 2222) as B limit 10 offset 0;
\如果用户自己修改页码，也可能导致变慢，此时可以对 url 页码进行加密，例如rest framework
--------------------------------------------------------------------------
'优化三'
可以按照当前业务需求，看是否可以设置只允许看前200页；
一般情况下，没人会咔咔看个几十上百页的；

78.什么是索引合并？
# 索引合并访问方法可以在查询中对一个表使用多个索引,对它们同时扫描，并且合并结果。
# 此访问方法合并来自单个表的索引扫描; 它不会将扫描合并到多个表中。

79.什么是覆盖索引？
# 解释一：
　　就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。
# 解释二：
　　索引是高效找到行的一个方法，当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。
　　如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引。
# 注意：MySQL只能使用B-Tree索引做覆盖索引

80.简述数据库读写分离？
#利用数据库的主从分离：主，用于删除、修改、更新；从，用于查
#实现：两台服务器同步数据（减轻服务器的压力）
       原生SQL: select * from db.tb
       ORM：model.User.object.all().using('default')
       路由：db router
	   
81.简述数据库分库分表？（水平、垂直）
# 1、分库
    当数据库中的表太多，将某些表分到不同数据库，例如：1W张表时
    代价：连表查询跨数据库，代码变多
# 2、分表
    水平分表：将某些列拆分到另一张表，例如：博客+博客详情
    垂直分表：将某些历史信息，分到另外一张表中，例如：支付宝账单
	
82.redis如何实现主从复制？以及数据同步机制？
# 实现主从复制
    '创建6379和6380配置文件'
    redis.conf：6379为默认配置文件，作为Master服务配置；
    redis_6380.conf：6380为同步配置，作为Slave服务配置；
    '配置slaveof同步指令'
    在Slave对应的conf配置文件中，添加以下内容：
    slaveof 127.0.0.1 6379
# 数据同步步骤：
    (1)Slave服务器连接到Master服务器.
    (2)Slave服务器发送同步(SYCN)命令.
    (3)Master服务器备份数据库到文件.
    (4)Master服务器把备份文件传输给Slave服务器.
    (5)Slave服务器把备份文件数据导入到数据库中.
	
83.redis中的sentinel的作用？
# 帮助我们自动在主从之间进行切换(哨兵)
# 检测主从中 主是否挂掉，且超过一半的sentinel检测到挂了之后才进行进行切换。
# 如果主修复好了，再次启动时候，会变成从。

84.如何实现redis集群？
#基于【分片】来完成。
    - 集群是将你的数据拆分到多个Redis实例的过程
    - 可以使用很多电脑的内存总和来支持更大的数据库。
    - 没有分片，你就被局限于单机能支持的内存容量。
#redis将所有能放置数据的地方创建了 16384 个哈希槽。
#如果设置集群的话，就可以为每个实例分配哈希槽：
    - 192.168.1.20【0-5000】
    - 192.168.1.21【5001-10000】
    - 192.168.1.22【10001-16384】
#以后想要在redis中写值时：set k1 123 
    - 将k1通过crc16的算法转换成一个数字，然后再将该数字和16384求余，
    - 如果得到的余数 3000，那么就将该值写入到 192.168.1.20 实例中。
#集群方案：
    - redis cluster：官方提供的集群方案。
    - codis：豌豆荚技术团队。
    - tweproxy：Twiter技术团队。
	
85.简述redis的有哪几种持久化策略及比较？
#RDB：每隔一段时间对redis进行一次持久化。
     - 缺点：数据不完整
     - 优点：速度快
#AOF：把所有命令保存起来，如果想重新生成到redis，那么就要把命令重新执行一次。
     - 缺点：速度慢，文件比较大
     - 优点：数据完整
	 
86.列举redis支持的过期策略。
# 数据集（server.db[i].expires）
a、voltile-lru：    #从已设置过期时间的数据集中，挑选最近频率最少数据淘汰
b、volatile-ttl：   #从已设置过期时间的数据集中，挑选将要过期的数据淘汰
c、volatile-random：#从已设置过期时间的数据集中，任意选择数据淘汰
d、allkeys-lru：       #从数据集中，挑选最近最少使用的数据淘汰
e、allkeys-random：    #从数据集中，任意选择数据淘汰
f、no-enviction(驱逐)：#禁止驱逐数据

87.如何基于redis实现消息队列？
# 通过发布订阅模式的PUB、SUB实现消息队列
# 发布者发布消息到频道了，频道就是一个消息队列。
# 发布者：
import redis
conn = redis.Redis(host='127.0.0.1',port=6379)
conn.publish('104.9MH', "hahahahahaha")
# 订阅者：
import redis
conn = redis.Redis(host='127.0.0.1',port=6379)
pub = conn.pubsub()
pub.subscribe('104.9MH')
while True:
    msg= pub.parse_response()
    print(msg)
对了，redis 做消息队列不合适
业务上避免过度复用一个redis，用它做缓存、做计算，还做任务队列，压力太大，不好。

88.如何基于redis实现发布和订阅？以及发布订阅和消息队列的区别？
# 发布和订阅，只要有任务就所有订阅者每人一份。
发布者： #发布一次
    import redis
    conn = redis.Redis(host='127.0.0.1',port=6379)
    conn.publish('104.9MH', "hahahahahaha")
订阅者： #'while True'一直在接收
    import redis
    conn = redis.Redis(host='127.0.0.1',port=6379)
    pub = conn.pubsub()
    pub.subscribe('104.9MH')
    while True:
        msg= pub.parse_response()
        print(msg)

		
89.什么是twemproxy及作用？
# 什么是Twemproxy 
是Twtter开源的一个 Redis 和 Memcache 代理服务器，
主要用于管理 Redis 和 Memcached 集群，减少与Cache服务器直接连接的数量。
他的后端是多台REDIS或memcached所以也可以被称为分布式中间件。
# 作用
    通过代理的方式减少缓存服务器的连接数。
    自动在多台缓存服务器间共享数据。
    通过配置的方式禁用失败的结点。
    运行在多个实例上，客户端可以连接到首个可用的代理服务器。
    支持请求的流式与批处理，因而能够降低来回的消耗。

90.写代码实现redis事务操作。
import redis
pool = redis.ConnectionPool(host='10.211.55.4', port=6379)
conn = redis.Redis(connection_pool=pool)
# pipe = r.pipeline(transaction=False)
pipe = conn.pipeline(transaction=True)
# 开始事务
pipe.multi()
pipe.set('name', 'zgc')
pipe.set('role', 'haha')
pipe.lpush('roless', 'haha')
# 提交
pipe.execute()
'注意'：咨询是否当前分布式redis是否支持事务

91.如何高效的找到redis中所有以zhugc开头的key？
redis 有一个keys命令。
# 语法：KEYS pattern
# 说明：返回与指定模式相匹配的所用的keys。
该命令所支持的匹配模式如下：
1、?：用于匹配单个字符。例如，h?llo可以匹配hello、hallo和hxllo等；
2、*：用于匹配零个或者多个字符。例如，h*llo可以匹配hllo和heeeello等；
2、[]：可以用来指定模式的选择区间。例如h[ae]llo可以匹配hello和hallo，但是不能匹配hillo。同时，可以使用“/”符号来转义特殊的字符
# 注意
KEYS 的速度非常快，但如果数据太大，内存可能会崩掉，
如果需要从一个数据集中查找特定的key，最好还是用Redis的集合结构(set)来代替。

92.悲观锁和乐观锁的区别？
# 悲观锁
    从数据开始更改时就将数据锁住，直到更改完成才释放；
    会造成访问数据库时间较长，并发性不好，特别是长事务。
# 乐观锁
    直到修改完成，准备提交修改到数据库时才会锁住数据，完成更改后释放；
    相对悲观锁，在现实中使用较多。
	
93.谈谈你对websocket协议的认识。
# a.什么是websocket？
    是给浏览器新建的一套协议
    协议规定:创建连接后不断开
    通过'\r\n'分割,让客户端和服务端创建连接后不断开、验证+数据加密
# b.本质:
# 就是一个创建连接后不断开的socket
# 当连接成功后:
    - 客户端(浏览器)会自动向服务端发送消息
    - 服务端接收后,会对该数据加密:base64(sha1(swk+magic_string))
    - 构造响应头
    - 发送给客户端
# 建立双工通道,进行收发数据
# c.框架中是如何使用websocket的？
    django：channel
    flask：gevent-websocket
    tornado：内置
# d.websocket的优缺点
    优点：代码简单，不再重复创建连接
    缺点：兼容性没有长轮询好，如IE会有不兼容
	
94.列举Http请求中常见的请求方式？
# http请求方法有8种:
        'GET'
        'POST'
        'HEAD'
        'OPTIONS'
        'PUT'
        'DELETE'
        'TRACE'
        'CONNECT'
		
95.列举Http请求中的状态码？
# 2开头（成功）
    200：请求成功
    202：已接受请求，尚未处理
    204：请求成功，且不需返回内容
# 3开头（重定向）
    301：永久重定向
    302：临时重定向
# 4开头（客户端错误）
    400（Bad Request）：请求的语义或是参数有错
    403（Forbidden）：服务器拒绝了请求(csrf)
    404（Not Found）：找不到页面(资源)
# 5开头（服务器错误）
    500：服务器遇到错误，无法完成请求
    502：网关错误，一般是服务器压力过大导致连接超时       
    503：服务器宕机
	
